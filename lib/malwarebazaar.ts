/**
 * MalwareBazaar API client for validating malware hashes
 */

export interface MalwareBazaarResponse {
  query_status: "ok" | "no_results" | "illegal_hash" | "hash_not_found"
  data: {
    sha256_hash: string
    sha1_hash: string
    md5_hash: string
    first_seen: string
    last_seen: string
    file_name: string
    file_type: string
    file_type_mime: string
    file_size: number
    reporter: string
    anonymous: number
    signature: string | null
    imphash: string | null
    ssdeep: string | null
    tlsh: string | null
    tags: string[]
    code_sign: string[]
    delivery_method: string
    intelligence: {
      clamav: string[] | null
      downloads: number
      uploads: number
      mail: string[] | null
    }
  }[]
}

class MalwareBazaarAPIError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public queryStatus?: string,
  ) {
    super(message)
    this.name = "MalwareBazaarAPIError"
  }
}

export async function checkHash(apiKey: string, hash: string): Promise<MalwareBazaarResponse> {
  // Validate hash format
  const hashRegex = /^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$/
  if (!hashRegex.test(hash)) {
    throw new MalwareBazaarAPIError("Invalid hash format. Must be MD5 (32), SHA1 (40), or SHA256 (64) characters", 400)
  }

  const formData = new FormData()
  formData.append("query", "get_info")
  formData.append("hash", hash.toLowerCase())

  // Only append API key if provided (some endpoints work without it)
  if (apiKey) {
    formData.append("api_key", apiKey)
  }

  try {
    const response = await fetch("https://mb-api.abuse.ch/api/v1/", {
      method: "POST",
      body: formData,
      headers: {
        "User-Agent": "PCAP-Scanner/1.0",
      },
    })

    if (!response.ok) {
      throw new MalwareBazaarAPIError(
        `MalwareBazaar API error: ${response.status} ${response.statusText}`,
        response.status,
      )
    }

    const data: MalwareBazaarResponse = await response.json()

    // Handle API-specific error responses
    if (data.query_status === "illegal_hash") {
      throw new MalwareBazaarAPIError("Illegal hash format provided", 400, data.query_status)
    }

    return data
  } catch (error) {
    if (error instanceof MalwareBazaarAPIError) {
      throw error
    }
    throw new MalwareBazaarAPIError(
      `Failed to query MalwareBazaar: ${error instanceof Error ? error.message : "Unknown error"}`,
      500,
    )
  }
}

export function isMalicious(response: MalwareBazaarResponse): boolean {
  return response.query_status === "ok" && response.data.length > 0
}

export function getMalwareDetails(response: MalwareBazaarResponse): {
  fileName: string
  fileType: string
  fileSize: number
  firstSeen: string
  lastSeen: string
  tags: string[]
  signature: string | null
  reporter: string
  deliveryMethod: string
} | null {
  if (response.query_status !== "ok" || response.data.length === 0) {
    return null
  }

  const data = response.data[0]
  return {
    fileName: data.file_name,
    fileType: data.file_type,
    fileSize: data.file_size,
    firstSeen: data.first_seen,
    lastSeen: data.last_seen,
    tags: data.tags,
    signature: data.signature,
    reporter: data.reporter,
    deliveryMethod: data.delivery_method,
  }
}
